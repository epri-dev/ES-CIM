# generated by datamodel-codegen:
#   filename:  PWRWaterChemistryDataSets.draft-07.schema.json
#   timestamp: 2022-02-24T16:09:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, constr


class AlkalinityUnitSymbol(Enum):
    mg_l = 'mg/l'


class AnalogValueQualifierKind(Enum):
    greaterThan = 'greaterThan'
    greaterThanOrEqualTo = 'greaterThanOrEqualTo'
    lessThan = 'lessThan'
    lessThanOrEqualTo = 'lessThanOrEqualTo'
    limitOfQuantitation = 'limitOfQuantitation'
    none = 'none'
    other = 'other'


class BacterialCountUnitSymbol(Enum):
    planktonicCount = 'planktonicCount'
    sessileCount = 'sessileCount'
    speciesCount = 'speciesCount'


class ConcentrationUnitSymbol(Enum):
    cm3_kg = 'cm3/kg'
    ppb = 'ppb'
    ppm = 'ppm'


class ConductivityUnitSymbol(Enum):
    µS_cm = 'µS/cm'


class CorrosionRateUnitSymbol(Enum):
    mils_yr = 'mils/yr'


class HardnessUnitSymbol(Enum):
    mg_l = 'mg/l'


class MassUnitSymbol(Enum):
    g = 'g'


class NormalizedLevelUnitSymbol(Enum):
    none = 'none'


class NuclearOperatingCycle(BaseModel):
    cycleNumber: int = Field(..., description='')


class PWRNuclearGenerationUnit(BaseModel):
    mRID: Optional[str] = Field(
        None,
        description='Master resource identifier issued by a model authority. The mRID is unique within an exchange context. Global uniqueness is easily achieved by using a UUID, as specified in RFC 4122, for the mRID. The use of UUID is strongly recommended. For CIMXML data files in RDF syntax conforming to IEC 61970-552, the mRID is mapped to rdf:ID or rdf:about attributes that identify CIM object elements.',
    )
    name: Optional[str] = Field(
        None,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )


class PercentUnitSymbol(Enum):
    none = 'none'


class PressureUnitSymbol(Enum):
    psi = 'psi'


class QualifiedAnalogValue(BaseModel):
    analogValueQualifierKind: Optional[AnalogValueQualifierKind] = None
    analogValueQualifierKindOther: Optional[str] = Field(None, description='')
    timeStamp: constr(
        regex=r'^(([0-9]{4})-(((02)-(0[1-9]|[1][0-9]|2[0-9]))|((0[4689]|(11))-(0[1-9]|[1][0-9]|2[0-9]|(30)))|((0[13578]|(1[02]))-(0[1-9]|[1][0-9]|2[0-9]|(3[0-1])))))T((2[0-3]|[01][0-9])((:([0-5][0-9])((:([0-5][0-9])(([.][0-9]+)?)?)?)?)?)|(24)((:(00)((:(00)(([.][0]+)?)?)?)?)?))(Z|[+-](2[0-3]|[01][0-9])(:([0-5][0-9]))?)$'
    ) = Field(..., description='The time when the value was last updated.')
    value: float = Field(..., description='The value to supervise.')


class ScalingIndexUnitSymbol(Enum):
    none = 'none'


class SpecificActivityUnitSymbol(Enum):
    µCi_ml = 'µCi/ml'


class TemperatureUnitSymbol(Enum):
    degF = 'degF'


class TurbidityUnitSymbol(Enum):
    NTU = 'NTU'


class VolumeFlowRateUnitSymbol(Enum):
    gal_d = 'gal/d'
    gal_min = 'gal/min'


class PHUnitSymbol(Enum):
    none = 'none'


class AlkalinityAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: AlkalinityUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class BacterialCountAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: BacterialCountUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class ConcentrationAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: ConcentrationUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class ConductivityAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: ConductivityUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class CorrosionRateAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: CorrosionRateUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class HardnessAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: HardnessUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class MassAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: MassUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class NormalizedLevelAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: NormalizedLevelUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class PercentAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: PercentUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class PressureAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: PressureUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class ScalingIndexAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: ScalingIndexUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class SpecificActivityAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: SpecificActivityUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class TemperatureAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: TemperatureUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class TurbidityAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: TurbidityUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class VolumeFlowRateAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: VolumeFlowRateUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class PHAnalog(BaseModel):
    _type: Any = Field(..., alias='@type')
    name: str = Field(
        ...,
        description='The name is any free human readable and possibly non unique text naming the object.',
    )
    unitOfMeasure: PHUnitSymbol
    AnalogValues: List[QualifiedAnalogValue] = Field(
        ..., description='The values connected to this measurement.', min_items=1
    )


class MeasurementPoint(BaseModel):
    Measurements: List[
        Union[
            AlkalinityAnalog,
            BacterialCountAnalog,
            ConcentrationAnalog,
            ConductivityAnalog,
            CorrosionRateAnalog,
            HardnessAnalog,
            MassAnalog,
            NormalizedLevelAnalog,
            PercentAnalog,
            PressureAnalog,
            ScalingIndexAnalog,
            SpecificActivityAnalog,
            TemperatureAnalog,
            TurbidityAnalog,
            VolumeFlowRateAnalog,
            PHAnalog,
        ]
    ] = Field(..., description='', min_items=1)


class PWRWaterChemistryDataSet(BaseModel):
    MeasurementPoint: List[MeasurementPoint] = Field(..., description='', min_items=1)
    NuclearOperatingCycles: Optional[List[NuclearOperatingCycle]] = Field(
        None, description=''
    )
    PWRNuclearGenerationUnit: PWRNuclearGenerationUnit


class PWRWaterChemistryDataSets(BaseModel):
    PWRWaterChemistryDataSet: PWRWaterChemistryDataSet
